@model Onboarding.ViewModels.CreateOnboardingViewModel

@{
    ViewData["Title"] = "Utwórz nowy kurs";
}

<div class="container-custom">
    <h1 class="header-custom">Utwórz nowy kurs</h1>

    <div class="card-custom p-4">
        <form asp-action="Create" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="All" class="text-danger mb-3"></div>

            <div class="form-group with-icon mt-3">
                <label for="ImageFile" class="control-label">Obraz kursu</label>
                <i class="bi bi-image form-icon"></i>
                <input type="file" name="ImageFile" class="form-control" accept="image/*" />
            </div>

            <div class="form-group with-icon">
                <label asp-for="CourseName" class="control-label">Nazwa kursu</label>
                <i class="bi bi-book form-icon"></i>
                <input asp-for="CourseName" class="form-control" placeholder="Wprowadź nazwę kursu" required />
                <span asp-validation-for="CourseName" class="text-danger"></span>
            </div>

            <div class="form-group with-icon mt-3">
                <label asp-for="MentorId" class="control-label">Manager kursu</label>
                <i class="bi bi-person form-icon"></i>
                <select asp-for="MentorId" class="form-control">
                    <option value="">Brak Managera</option>
                    @foreach (var mentor in ViewData["Mentors"] as SelectList)
                    {
                        <option value="@mentor.Value">@mentor.Text</option>
                    }
                </select>
                <span asp-validation-for="MentorId" class="text-danger"></span>
            </div>

            <h3 class="mt-4">Zadania</h3>
            <div id="tasks-container" class="mb-3">
            </div>
            <button type="button" class="btn btn-primary btn-custom mb-3" onclick="addTask()">
                <i class="bi bi-plus-circle me-1"></i> Dodaj zadanie
            </button>

            <h3 class="mt-4">Testy</h3>
            <div id="tests-container" class="mb-3">
            </div>
            <button type="button" class="btn btn-primary btn-custom mb-3" onclick="addTest()">
                <i class="bi bi-plus-circle me-1"></i> Dodaj test
            </button>

            <div class="form-group d-flex justify-content-center align-items-center gap-3 mt-4">
                <button type="submit" class="btn btn-primary btn-custom">
                    <i class="bi bi-check-circle me-1"></i> Utwórz
                </button>
                <a asp-action="Index" asp-controller="Courses" class="btn btn-outline-secondary btn-custom">
                    <i class="bi bi-arrow-left me-1"></i> Anuluj
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        let taskIndex = 0;
        let testIndex = 0;

        function addTask() {
            const container = document.getElementById("tasks-container");
            const mentorsAvailable = @(ViewData["Mentors"] != null && ((SelectList)ViewData["Mentors"]).Any() ? "true" : "false");
            if (!mentorsAvailable) {
                alert("Brak dostępnych Managerow. Dodaj użytkowników w systemie przed utworzeniem zadania.");
                return;
            }

            const taskHtml = `
                <div class="card-custom task-group mb-3 p-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="fw-bold">Zadanie ${taskIndex + 1}</h6>
                        <button type="button" class="btn btn-danger btn-custom btn-sm" onclick="removeTask(this)">
                            <i class="bi bi-trash me-1"></i> Usuń
                        </button>
                    </div>
                    <div class="form-group with-icon">
                        <label class="control-label">Tytuł</label>
                        <i class="bi bi-pencil form-icon"></i>
                        <input type="text" name="Tasks[${taskIndex}].Title" class="form-control" placeholder="Wprowadź tytuł zadania" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tasks[${taskIndex}].Title" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group with-icon mt-2">
                        <label class="control-label">Opis</label>
                        <i class="bi bi-text-paragraph form-icon"></i>
                        <input type="text" name="Tasks[${taskIndex}].Description" class="form-control" placeholder="Wprowadź opis zadania" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tasks[${taskIndex}].Description" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group mt-2">
                        <label class="control-label">Mentor</label>
                        <select name="Tasks[${taskIndex}].MentorId" class="form-control" required>
                            <option value="">Wybierz mentora</option>
        @foreach (var mentor in ViewData["Mentors"] as SelectList)
        {
                                    <option value="@mentor.Value">@mentor.Text</option>
        }
                        </select>
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tasks[${taskIndex}].MentorId" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group with-icon mt-2">
                        <label class="control-label">Treść artykułu</label>
                        <i class="bi bi-file-text form-icon"></i>
                        <input type="text" name="Tasks[${taskIndex}].ArticleContent" class="form-control" placeholder="Dodaj treść artykułu" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tasks[${taskIndex}].ArticleContent" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group with-icon mt-2">
                        <label class="control-label">Linki</label>
                        <i class="bi bi-link-45deg form-icon"></i>
                        <input type="text" name="Tasks[${taskIndex}].Links" class="form-control" placeholder="Dodaj linki oddzielone spacją" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tasks[${taskIndex}].Links" data-valmsg-replace="true"></span>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML("beforeend", taskHtml);
            taskIndex++;
        }

        function addTest() {
            const container = document.getElementById("tests-container");
            const testHtml = `
                <div class="card-custom test-group mb-3 p-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="fw-bold">Test ${testIndex + 1}</h6>
                        <button type="button" class="btn btn-danger btn-custom btn-sm" onclick="removeTest(this)">
                            <i class="bi bi-trash me-1"></i> Usuń
                        </button>
                    </div>
                    <div class="form-group with-icon">
                        <label class="control-label">Nazwa testu</label>
                        <i class="bi bi-file-earmark-text form-icon"></i>
                        <input type="text" name="Tests[${testIndex}].Name" class="form-control" placeholder="Wprowadź nazwę testu" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tests[${testIndex}].Name" data-valmsg-replace="true"></span>
                    </div>
                    <div class="questions-container mt-3">
                        <h6>Pytania</h6>
                        <div id="questions-${testIndex}"></div>
                        <button type="button" class="btn btn-outline-primary btn-custom btn-sm mt-2" onclick="addQuestion(this, ${testIndex})">
                            <i class="bi bi-plus-circle me-1"></i> Dodaj pytanie
                        </button>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML("beforeend", testHtml);
            testIndex++;
        }

        function addQuestion(button, testIdx) {
            const container = document.getElementById(`questions-${testIdx}`);
            const questionIdx = container.getElementsByClassName("question-group").length;
            const questionHtml = `
                <div class="question-group border rounded p-3 mt-2">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <label class="fw-bold">Pytanie ${questionIdx + 1}</label>
                        <button type="button" class="btn btn-outline-danger btn-custom btn-sm" onclick="removeElement(this)">
                            <i class="bi bi-trash me-1"></i> Usuń
                        </button>
                    </div>
                    <div class="form-group with-icon">
                        <label class="control-label">Treść pytania</label>
                        <i class="bi bi-question-circle form-icon"></i>
                        <input type="text" name="Tests[${testIdx}].Questions[${questionIdx}].Description" class="form-control" placeholder="Wprowadź treść pytania" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tests[${testIdx}].Questions[${questionIdx}].Description" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group with-icon mt-2">
                        <label class="control-label">Odpowiedź A</label>
                        <i class="bi bi-a form-icon"></i>
                        <input type="text" name="Tests[${testIdx}].Questions[${questionIdx}].AnswerA" class="form-control" placeholder="Wprowadź odpowiedź A" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tests[${testIdx}].Questions[${questionIdx}].AnswerA" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group with-icon mt-2">
                        <label class="control-label">Odpowiedź B</label>
                        <i class="bi bi-b form-icon"></i>
                        <input type="text" name="Tests[${testIdx}].Questions[${questionIdx}].AnswerB" class="form-control" placeholder="Wprowadź odpowiedź B" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tests[${testIdx}].Questions[${questionIdx}].AnswerB" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group with-icon mt-2">
                        <label class="control-label">Odpowiedź C</label>
                        <i class="bi bi-c form-icon"></i>
                        <input type="text" name="Tests[${testIdx}].Questions[${questionIdx}].AnswerC" class="form-control" placeholder="Wprowadź odpowiedź C" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tests[${testIdx}].Questions[${questionIdx}].AnswerC" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group with-icon mt-2">
                        <label class="control-label">Odpowiedź D</label>
                        <i class="bi bi-d form-icon"></i>
                        <input type="text" name="Tests[${testIdx}].Questions[${questionIdx}].AnswerD" class="form-control" placeholder="Wprowadź odpowiedź D" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tests[${testIdx}].Questions[${questionIdx}].AnswerD" data-valmsg-replace="true"></span>
                    </div>
                    <div class="form-group mt-2">
                        <label class="control-label">Poprawna odpowiedź</label>
                        <select name="Tests[${testIdx}].Questions[${questionIdx}].CorrectAnswer" class="form-control" required>
                            <option value="A">A</option>
                            <option value="B">B</option>
                            <option value="C">C</option>
                            <option value="D">D</option>
                        </select>
                        <span class="text-danger field-validation-valid" data-valmsg-for="Tests[${testIdx}].Questions[${questionIdx}].CorrectAnswer" data-valmsg-replace="true"></span>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML("beforeend", questionHtml);
        }

        function removeTask(button) {
            button.closest(".task-group").remove();
            reindexTasks();
        }

        function removeTest(button) {
            button.closest(".test-group").remove();
            reindexTests();
        }

        function removeElement(button) {
            button.closest(".question-group").remove();
        }

        function reindexTasks() {
            const tasks = document.querySelectorAll(".task-group");
            tasks.forEach((task, index) => {
                const inputs = task.querySelectorAll("input, select");
                inputs.forEach(input => {
                    const oldName = input.name;
                    if (oldName) {
                        input.name = oldName.replace(/Tasks\[\d+\]/, `Tasks[${index}]`);
                    }
                    const oldValMsgFor = input.nextElementSibling?.getAttribute("data-valmsg-for");
                    if (oldValMsgFor) {
                        input.nextElementSibling.setAttribute("data-valmsg-for", oldValMsgFor.replace(/Tasks\[\d+\]/, `Tasks[${index}]`));
                    }
                });
            });
            taskIndex = tasks.length;
        }

        function reindexTests() {
            const tests = document.querySelectorAll(".test-group");
            tests.forEach((test, index) => {
                const inputs = test.querySelectorAll("input, select");
                inputs.forEach(input => {
                    const oldName = input.name;
                    if (oldName) {
                        input.name = oldName.replace(/Tests\[\d+\]/, `Tests[${index}]`);
                    }
                    const oldValMsgFor = input.nextElementSibling?.getAttribute("data-valmsg-for");
                    if (oldValMsgFor) {
                        input.nextElementSibling.setAttribute("data-valmsg-for", oldValMsgFor.replace(/Tests\[\d+\]/, `Tests[${index}]`));
                    }
                });
                const questionsContainer = test.querySelector(".questions-container div");
                if (questionsContainer) {
                    questionsContainer.id = `questions-${index}`;
                    const questions = questionsContainer.querySelectorAll(".question-group");
                    questions.forEach((question, qIndex) => {
                        const qInputs = question.querySelectorAll("input, select");
                        qInputs.forEach(input => {
                            const oldName = input.name;
                            if (oldName) {
                                input.name = oldName.replace(/Tests\[\d+\]\.Questions\[\d+\]/, `Tests[${index}].Questions[${qIndex}]`);
                            }
                            const oldValMsgFor = input.nextElementSibling?.getAttribute("data-valmsg-for");
                            if (oldValMsgFor) {
                                input.nextElementSibling.setAttribute("data-valmsg-for", oldValMsgFor.replace(/Tests\[\d+\]\.Questions\[\d+\]/, `Tests[${index}].Questions[${qIndex}]`));
                            }
                        });
                    });
                }
            });
            testIndex = tests.length;
        }

        document.querySelector("form").addEventListener("submit", function (event) {
            const mentorSelects = document.querySelectorAll("select[name$='.MentorId']");
            let isValid = true;
            mentorSelects.forEach(select => {
                if (!select.value) {
                    isValid = false;
                    const errorSpan = select.nextElementSibling;
                    if (errorSpan && errorSpan.classList.contains("field-validation-valid")) {
                        errorSpan.classList.remove("field-validation-valid");
                        errorSpan.classList.add("field-validation-error");
                        errorSpan.textContent = "Wybierz mentora.";
                    }
                }
            });
            if (!isValid) {
                event.preventDefault();
                alert("Proszę wybrać mentora dla wszystkich zadań.");
            }
        });
    </script>
}